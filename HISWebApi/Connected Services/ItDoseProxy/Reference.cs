//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HISWebApi.ItDoseProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ItDoseProxy.MobileAppSoap")]
    public interface MobileAppSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDoctor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadDoctor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDoctor", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadDoctorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDepartment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadDepartment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDepartment", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadDepartmentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDepartmentWiseDoctor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadDepartmentWiseDoctor(string DepartmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDepartmentWiseDoctor", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadDepartmentWiseDoctorAsync(string DepartmentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadTimeSlot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadTimeSlot(string DoctorId, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadTimeSlot", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadTimeSlotAsync(string DoctorId, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateOTP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GenerateOTP(string UHID, string Phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateOTP", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GenerateOTPAsync(string UHID, string Phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateAppointment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GenerateAppointment(string UHID, string DoctorId, string AppDate, string AppTime, string DeseaseDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateAppointment", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GenerateAppointmentAsync(string UHID, string DoctorId, string AppDate, string AppTime, string DeseaseDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ViewInvestigationReportHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ViewInvestigationReportHistory(string MobileNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ViewInvestigationReportHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ViewInvestigationReportHistoryAsync(string MobileNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PrintInvestigationReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PrintInvestigationReport(string Test_ID, string LabreportType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PrintInvestigationReport", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PrintInvestigationReportAsync(string Test_ID, string LabreportType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadAppointmentHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadAppointmentHistory(string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadAppointmentHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadAppointmentHistoryAsync(string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDischargeSummary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadDischargeSummary(string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadDischargeSummary", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadDischargeSummaryAsync(string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateDirectAppointment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GenerateDirectAppointment(string title, string firstName, string lastName, string age, string gender, string mobile, string address, string DoctorId, string AppDate, string AppTime, string DeseaseDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateDirectAppointment", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GenerateDirectAppointmentAsync(string title, string firstName, string lastName, string age, string gender, string mobile, string address, string DoctorId, string AppDate, string AppTime, string DeseaseDesc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PrintOutsourceInvestigationReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PrintOutsourceInvestigationReport(string LedgerTransactionNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PrintOutsourceInvestigationReport", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PrintOutsourceInvestigationReportAsync(string LedgerTransactionNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadOPDPresciptionCard", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LoadOPDPresciptionCard(string Mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoadOPDPresciptionCard", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoadOPDPresciptionCardAsync(string Mobile);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MobileAppSoapChannel : HISWebApi.ItDoseProxy.MobileAppSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MobileAppSoapClient : System.ServiceModel.ClientBase<HISWebApi.ItDoseProxy.MobileAppSoap>, HISWebApi.ItDoseProxy.MobileAppSoap {
        
        public MobileAppSoapClient() {
        }
        
        public MobileAppSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MobileAppSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobileAppSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobileAppSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string LoadDoctor() {
            return base.Channel.LoadDoctor();
        }
        
        public System.Threading.Tasks.Task<string> LoadDoctorAsync() {
            return base.Channel.LoadDoctorAsync();
        }
        
        public string LoadDepartment() {
            return base.Channel.LoadDepartment();
        }
        
        public System.Threading.Tasks.Task<string> LoadDepartmentAsync() {
            return base.Channel.LoadDepartmentAsync();
        }
        
        public string LoadDepartmentWiseDoctor(string DepartmentName) {
            return base.Channel.LoadDepartmentWiseDoctor(DepartmentName);
        }
        
        public System.Threading.Tasks.Task<string> LoadDepartmentWiseDoctorAsync(string DepartmentName) {
            return base.Channel.LoadDepartmentWiseDoctorAsync(DepartmentName);
        }
        
        public string LoadTimeSlot(string DoctorId, string Date) {
            return base.Channel.LoadTimeSlot(DoctorId, Date);
        }
        
        public System.Threading.Tasks.Task<string> LoadTimeSlotAsync(string DoctorId, string Date) {
            return base.Channel.LoadTimeSlotAsync(DoctorId, Date);
        }
        
        public string GenerateOTP(string UHID, string Phone) {
            return base.Channel.GenerateOTP(UHID, Phone);
        }
        
        public System.Threading.Tasks.Task<string> GenerateOTPAsync(string UHID, string Phone) {
            return base.Channel.GenerateOTPAsync(UHID, Phone);
        }
        
        public string GenerateAppointment(string UHID, string DoctorId, string AppDate, string AppTime, string DeseaseDesc) {
            return base.Channel.GenerateAppointment(UHID, DoctorId, AppDate, AppTime, DeseaseDesc);
        }
        
        public System.Threading.Tasks.Task<string> GenerateAppointmentAsync(string UHID, string DoctorId, string AppDate, string AppTime, string DeseaseDesc) {
            return base.Channel.GenerateAppointmentAsync(UHID, DoctorId, AppDate, AppTime, DeseaseDesc);
        }
        
        public string ViewInvestigationReportHistory(string MobileNo) {
            return base.Channel.ViewInvestigationReportHistory(MobileNo);
        }
        
        public System.Threading.Tasks.Task<string> ViewInvestigationReportHistoryAsync(string MobileNo) {
            return base.Channel.ViewInvestigationReportHistoryAsync(MobileNo);
        }
        
        public string PrintInvestigationReport(string Test_ID, string LabreportType) {
            return base.Channel.PrintInvestigationReport(Test_ID, LabreportType);
        }
        
        public System.Threading.Tasks.Task<string> PrintInvestigationReportAsync(string Test_ID, string LabreportType) {
            return base.Channel.PrintInvestigationReportAsync(Test_ID, LabreportType);
        }
        
        public string LoadAppointmentHistory(string Mobile) {
            return base.Channel.LoadAppointmentHistory(Mobile);
        }
        
        public System.Threading.Tasks.Task<string> LoadAppointmentHistoryAsync(string Mobile) {
            return base.Channel.LoadAppointmentHistoryAsync(Mobile);
        }
        
        public string LoadDischargeSummary(string Mobile) {
            return base.Channel.LoadDischargeSummary(Mobile);
        }
        
        public System.Threading.Tasks.Task<string> LoadDischargeSummaryAsync(string Mobile) {
            return base.Channel.LoadDischargeSummaryAsync(Mobile);
        }
        
        public string GenerateDirectAppointment(string title, string firstName, string lastName, string age, string gender, string mobile, string address, string DoctorId, string AppDate, string AppTime, string DeseaseDesc) {
            return base.Channel.GenerateDirectAppointment(title, firstName, lastName, age, gender, mobile, address, DoctorId, AppDate, AppTime, DeseaseDesc);
        }
        
        public System.Threading.Tasks.Task<string> GenerateDirectAppointmentAsync(string title, string firstName, string lastName, string age, string gender, string mobile, string address, string DoctorId, string AppDate, string AppTime, string DeseaseDesc) {
            return base.Channel.GenerateDirectAppointmentAsync(title, firstName, lastName, age, gender, mobile, address, DoctorId, AppDate, AppTime, DeseaseDesc);
        }
        
        public string PrintOutsourceInvestigationReport(string LedgerTransactionNo) {
            return base.Channel.PrintOutsourceInvestigationReport(LedgerTransactionNo);
        }
        
        public System.Threading.Tasks.Task<string> PrintOutsourceInvestigationReportAsync(string LedgerTransactionNo) {
            return base.Channel.PrintOutsourceInvestigationReportAsync(LedgerTransactionNo);
        }
        
        public string LoadOPDPresciptionCard(string Mobile) {
            return base.Channel.LoadOPDPresciptionCard(Mobile);
        }
        
        public System.Threading.Tasks.Task<string> LoadOPDPresciptionCardAsync(string Mobile) {
            return base.Channel.LoadOPDPresciptionCardAsync(Mobile);
        }
    }
}
